// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project2025;

#nullable disable

namespace Project2025.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250606111021_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project2025.ApartmentRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("MaxArea")
                        .HasColumnType("real");

                    b.Property<int>("MaxFloor")
                        .HasColumnType("int");

                    b.Property<int>("MaxRooms")
                        .HasColumnType("int");

                    b.Property<float>("MinArea")
                        .HasColumnType("real");

                    b.Property<int>("MinFloor")
                        .HasColumnType("int");

                    b.Property<int>("MinRooms")
                        .HasColumnType("int");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId")
                        .IsUnique();

                    b.ToTable("ApartmentRequirements", t =>
                        {
                            t.HasCheckConstraint("CK_ApartmentRequirement_MaxArea", "MaxArea >= 0");

                            t.HasCheckConstraint("CK_ApartmentRequirement_MaxFloor", "MaxFloor >= 1");

                            t.HasCheckConstraint("CK_ApartmentRequirement_MaxRooms", "MaxRooms >= 0");

                            t.HasCheckConstraint("CK_ApartmentRequirement_MinArea", "MinArea >= 0");

                            t.HasCheckConstraint("CK_ApartmentRequirement_MinFloor", "MinFloor >= 1");

                            t.HasCheckConstraint("CK_ApartmentRequirement_MinRooms", "MinRooms >= 0");
                        });
                });

            modelBuilder.Entity("Project2025.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("BuyerRealtorDeduction")
                        .HasColumnType("real");

                    b.Property<float>("CompanyDeduction")
                        .HasColumnType("real");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.Property<float>("SellerRealtorDeduction")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("RequirementId");

                    b.ToTable("Deals", t =>
                        {
                            t.HasCheckConstraint("CK_Deal_BuyerRealtorDeduction", "BuyerRealtorDeduction BETWEEN 0 AND 99");

                            t.HasCheckConstraint("CK_Deal_SellerRealtorDeduction", "SellerRealtorDeduction BETWEEN 0 AND 99");
                        });
                });

            modelBuilder.Entity("Project2025.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Project2025.HouseRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("MaxArea")
                        .HasColumnType("real");

                    b.Property<int>("MaxFloors")
                        .HasColumnType("int");

                    b.Property<int>("MaxRooms")
                        .HasColumnType("int");

                    b.Property<float>("MinArea")
                        .HasColumnType("real");

                    b.Property<int>("MinFloors")
                        .HasColumnType("int");

                    b.Property<int>("MinRooms")
                        .HasColumnType("int");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId")
                        .IsUnique();

                    b.ToTable("HouseRequirements", t =>
                        {
                            t.HasCheckConstraint("CK_HouseRequirement_MaxArea", "MaxArea >= 0");

                            t.HasCheckConstraint("CK_HouseRequirement_MaxFloors", "MaxFloors >= 1");

                            t.HasCheckConstraint("CK_HouseRequirement_MaxRooms", "MaxRooms >= 0");

                            t.HasCheckConstraint("CK_HouseRequirement_MinArea", "MinArea >= 0");

                            t.HasCheckConstraint("CK_HouseRequirement_MinFloors", "MinFloors >= 1");

                            t.HasCheckConstraint("CK_HouseRequirement_MinRooms", "MinRooms >= 0");
                        });
                });

            modelBuilder.Entity("Project2025.LandRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("MaxArea")
                        .HasColumnType("real");

                    b.Property<float>("MinArea")
                        .HasColumnType("real");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId")
                        .IsUnique();

                    b.ToTable("LandRequirements", t =>
                        {
                            t.HasCheckConstraint("CK_LandRequirement_MaxArea", "MaxArea >= 0");

                            t.HasCheckConstraint("CK_LandRequirement_MinArea", "MinArea >= 0");
                        });
                });

            modelBuilder.Entity("Project2025.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasNeedsOrOffers")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Project2025.Models.Realtor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("CommissionShare")
                        .HasColumnType("float");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasNeedsOrOffers")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Realtors", t =>
                        {
                            t.HasCheckConstraint("CK_Realtor_CommissionShare", "CommissionShare BETWEEN 0 AND 100");
                        });
                });

            modelBuilder.Entity("Project2025.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PropertyObjectId")
                        .HasColumnType("int");

                    b.Property<int>("RealtorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PropertyObjectId");

                    b.HasIndex("RealtorId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Project2025.PropertyObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Area")
                        .HasColumnType("real");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("PropertyObjects");
                });

            modelBuilder.Entity("Project2025.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("Project2025.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("int");

                    b.Property<int>("MinPrice")
                        .HasColumnType("int");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RealtorId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("RealtorId");

                    b.ToTable("Requirements", t =>
                        {
                            t.HasCheckConstraint("CK_Requirement_MaxPrice", "MaxPrice >= 0");

                            t.HasCheckConstraint("CK_Requirement_MinPrice", "MinPrice >= 0");
                        });
                });

            modelBuilder.Entity("Project2025.ApartmentRequirement", b =>
                {
                    b.HasOne("Project2025.Requirement", null)
                        .WithOne()
                        .HasForeignKey("Project2025.ApartmentRequirement", "RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Project2025.Deal", b =>
                {
                    b.HasOne("Project2025.Offer", null)
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Project2025.Requirement", null)
                        .WithMany()
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Project2025.HouseRequirement", b =>
                {
                    b.HasOne("Project2025.Requirement", null)
                        .WithOne()
                        .HasForeignKey("Project2025.HouseRequirement", "RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Project2025.LandRequirement", b =>
                {
                    b.HasOne("Project2025.Requirement", null)
                        .WithOne()
                        .HasForeignKey("Project2025.LandRequirement", "RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Project2025.Offer", b =>
                {
                    b.HasOne("Project2025.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Project2025.PropertyObject", null)
                        .WithMany()
                        .HasForeignKey("PropertyObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Project2025.Models.Realtor", null)
                        .WithMany()
                        .HasForeignKey("RealtorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Project2025.PropertyObject", b =>
                {
                    b.HasOne("Project2025.District", null)
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Project2025.PropertyType", null)
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Project2025.Requirement", b =>
                {
                    b.HasOne("Project2025.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Project2025.District", null)
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Project2025.PropertyType", null)
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Project2025.Models.Realtor", null)
                        .WithMany()
                        .HasForeignKey("RealtorId")
                        .OnDelete(DeleteBehavior.NoAction);
                });
#pragma warning restore 612, 618
        }
    }
}
